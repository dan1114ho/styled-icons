import * as React from 'react'
import styled from 'styled-components'
import validProp from '@emotion/is-prop-valid'

import {StyledIconProps} from '../types{{cjs}}'

const StyledIcon = React.forwardRef<SVGSVGElement, StyledIconProps>((props, ref) => {
  const {title, size, ...otherProps} = props

  const iconProps: React.SVGProps<SVGSVGElement> = {
    viewBox: '{{viewBox}}',
    height: props.height !== undefined ? props.height : size,
    width: props.width !== undefined ? props.width : size,
    // @ts-ignore - aria is not always defined on SVG in React TypeScript types
    'aria-hidden': title == null ? 'true' : undefined,
    focusable: 'false',
    role: title != null ? 'img' : undefined,
    {{attrs}},
  }

  const svgProps = Object.keys(otherProps).reduce(
    (p, k) => {
      if (validProp(k)) {
        p[k] = otherProps[k]
      }
      return p
    }, {}
  )

  return (
    <svg {...iconProps} {...svgProps} ref={ref}>
      {title && <title key="{{name}}-title">{title}</title>}
      {{svg}}
    </svg>
  )
})

export const {{name}} = styled(StyledIcon)`
  display: inline-block;
  vertical-align: {{verticalAlign}};
  overflow: hidden;
`

{{name}}.displayName = '{{name}}'

export const {{name}}Dimensions = {height: {{height}}, width: {{width}}}
